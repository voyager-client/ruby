=begin
#voyager-server

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v0
Contact: hello@appscode.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'date'

module Kubernetes
  # IngressSpec describes the Ingress the user wishes to exist.
  class V1beta1IngressSpec
    # If specified, the pod's scheduling constraints
    attr_accessor :affinity

    # A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
    attr_accessor :backend

    # externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
    attr_accessor :external_i_ps

    # Frontend rules specifies a set of rules that should be applied in HAProxy frontend configuration. The set of keywords are from here https://cbonte.github.io/haproxy-dconv/1.7/configuration.html#4.1 Only frontend sections can be applied here. It is up to user to provide valid set of rules. This allows acls or other options in frontend sections in HAProxy config. Frontend rules will be mapped with Ingress Rules according to port.
    attr_accessor :frontend_rules

    # ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
    attr_accessor :image_pull_secrets

    # Optional: If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature. https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
    attr_accessor :load_balancer_source_ranges

    # NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
    attr_accessor :node_selector

    # Compute Resources required by the sidecar container.
    attr_accessor :resources

    # A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
    attr_accessor :rules

    # If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    attr_accessor :scheduler_name

    # TLS is the TLS configuration. Currently the Ingress only supports a single TLS port, 443, and assumes TLS termination. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension.
    attr_accessor :tls

    # If specified, the pod's tolerations.
    attr_accessor :tolerations


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'affinity' => :'affinity',
        :'backend' => :'backend',
        :'external_i_ps' => :'externalIPs',
        :'frontend_rules' => :'frontendRules',
        :'image_pull_secrets' => :'imagePullSecrets',
        :'load_balancer_source_ranges' => :'loadBalancerSourceRanges',
        :'node_selector' => :'nodeSelector',
        :'resources' => :'resources',
        :'rules' => :'rules',
        :'scheduler_name' => :'schedulerName',
        :'tls' => :'tls',
        :'tolerations' => :'tolerations'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'affinity' => :'V1Affinity',
        :'backend' => :'V1beta1HTTPIngressBackend',
        :'external_i_ps' => :'Array<String>',
        :'frontend_rules' => :'Array<V1beta1FrontendRule>',
        :'image_pull_secrets' => :'Array<V1LocalObjectReference>',
        :'load_balancer_source_ranges' => :'Array<String>',
        :'node_selector' => :'Hash<String, String>',
        :'resources' => :'V1ResourceRequirements',
        :'rules' => :'Array<V1beta1IngressRule>',
        :'scheduler_name' => :'String',
        :'tls' => :'Array<V1beta1IngressTLS>',
        :'tolerations' => :'Array<V1Toleration>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'affinity')
        self.affinity = attributes[:'affinity']
      end

      if attributes.has_key?(:'backend')
        self.backend = attributes[:'backend']
      end

      if attributes.has_key?(:'externalIPs')
        if (value = attributes[:'externalIPs']).is_a?(Array)
          self.external_i_ps = value
        end
      end

      if attributes.has_key?(:'frontendRules')
        if (value = attributes[:'frontendRules']).is_a?(Array)
          self.frontend_rules = value
        end
      end

      if attributes.has_key?(:'imagePullSecrets')
        if (value = attributes[:'imagePullSecrets']).is_a?(Array)
          self.image_pull_secrets = value
        end
      end

      if attributes.has_key?(:'loadBalancerSourceRanges')
        if (value = attributes[:'loadBalancerSourceRanges']).is_a?(Array)
          self.load_balancer_source_ranges = value
        end
      end

      if attributes.has_key?(:'nodeSelector')
        if (value = attributes[:'nodeSelector']).is_a?(Array)
          self.node_selector = value
        end
      end

      if attributes.has_key?(:'resources')
        self.resources = attributes[:'resources']
      end

      if attributes.has_key?(:'rules')
        if (value = attributes[:'rules']).is_a?(Array)
          self.rules = value
        end
      end

      if attributes.has_key?(:'schedulerName')
        self.scheduler_name = attributes[:'schedulerName']
      end

      if attributes.has_key?(:'tls')
        if (value = attributes[:'tls']).is_a?(Array)
          self.tls = value
        end
      end

      if attributes.has_key?(:'tolerations')
        if (value = attributes[:'tolerations']).is_a?(Array)
          self.tolerations = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          affinity == o.affinity &&
          backend == o.backend &&
          external_i_ps == o.external_i_ps &&
          frontend_rules == o.frontend_rules &&
          image_pull_secrets == o.image_pull_secrets &&
          load_balancer_source_ranges == o.load_balancer_source_ranges &&
          node_selector == o.node_selector &&
          resources == o.resources &&
          rules == o.rules &&
          scheduler_name == o.scheduler_name &&
          tls == o.tls &&
          tolerations == o.tolerations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [affinity, backend, external_i_ps, frontend_rules, image_pull_secrets, load_balancer_source_ranges, node_selector, resources, rules, scheduler_name, tls, tolerations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Kubernetes.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
